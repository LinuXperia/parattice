import org.gradle.internal.os.OperatingSystem;

plugins {
  id "cpp"
  id "eclipse"
  id "java-library"
  id "maven-publish"
  id "org.datlowe.maven-publish-auth" version "2.0.2"
}

allprojects {
  repositories {
    jcenter()
  }
  group = "parattice"
  version = "0.2.1-SNAPSHOT"
  sourceCompatibility = 1.8
  targetCompatibility = 1.8
}

test {
  useJUnitPlatform {
    includeEngines "junit-jupiter"
  }
}

dependencies {
  implementation "commons-io:commons-io:2.7"
  implementation "org.apache.commons:commons-lang3:3.10"
  testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.2"
  testImplementation "org.junit.jupiter:junit-jupiter-engine:5.6.2"
}

def nativeHeadersDir = file("$buildDir/nativeHeaders")

task nativeHeaders {
  def sourceFiles = [
  "$projectDir/src/main/java/parattice/Lattice.java",
  "$projectDir/src/main/java/parattice/LatticeKMP.java",
  "$projectDir/src/main/java/parattice/PaRattice.java",
  ]
  inputs.files sourceSets.main.output
  inputs.property("classes", classes)
  doLast {
    nativeHeadersDir.mkdirs()
    exec {
      executable org.gradle.internal.jvm.Jvm.current().getExecutable("javac")
      args "-h", nativeHeadersDir
      args "-d", "$projectDir/build/tmp"
      args "-classpath", sourceSets.main.output.classesDirs.asPath
      args "-Xlint:deprecation"
      args sourceFiles
    }
  }
}

model {
  platforms {
    if (OperatingSystem.current().isLinux()) {
      linux_amd64 {
        architecture "amd64"
        operatingSystem "linux"
      }
    } else if (OperatingSystem.current().isMacOsX()) {
      darwin_amd64 {
        architecture "amd64"
        operatingSystem "darwin"
      }
    }
  }
  components {
    nativePlatform(NativeLibrarySpec) {
      baseName "parattice"
      $.platforms.each { p ->
        targetPlatform p.name
      }
      sources {
        cpp {
          source.srcDirs = ["src/shared/cpp", "src/main/cpp"]
          exportedHeaders.srcDirs = ["src/shared/headers"]
        }
      }
    }
    all {
      binaries.all {
        cppCompiler.args "-std=c++11"
        cppCompiler.args "-O3", "-Wall", "-Wextra", "-Werror"
        cppCompiler.args "-I", "${org.gradle.internal.jvm.Jvm.current().javaHome}/include"
        if (OperatingSystem.current().isLinux()) {
          cppCompiler.args "-I", "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/linux"
        } else if (OperatingSystem.current().isMacOsX()) {
          cppCompiler.args "-I", "${org.gradle.internal.jvm.Jvm.current().javaHome}/include/darwin"
        }
        cppCompiler.args "-I$nativeHeadersDir"
        cppCompiler.args "-I$projectDir/../cpp/include"
        linker.args "$projectDir/../../target/release/libparattice.a"
      }
      binaries.withType(SharedLibraryBinarySpec) { binary ->
        def variantName = targetPlatform.name.replace("_", "-")
        def taskName = "jar-$variantName"
        def nativeJar = project.tasks.findByName(taskName)
        if (nativeJar == null) {
          nativeJar = project.tasks.create(taskName, Jar) {
            archiveBaseName = "parattice-$variantName"
          }
          artifacts {
            runtimeOnly nativeJar
          }
          publishing {
            publications {
              main(MavenPublication) {
                artifact(nativeJar) {
                  classifier = variantName
                }
              }
            }
          }
        }
        binary.tasks.withType(LinkSharedLibrary) { builderTask ->
          nativeJar.into("parattice/platform/$variantName") { from builderTask.linkedFile }
        }
        project.tasks.test {
          classpath.from nativeJar
        }
      }
    }
  }
}

tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
}

tasks.withType(CppCompile) { task ->
  task.dependsOn project.tasks.nativeHeaders
}

publishing {
  publications {
    main(MavenPublication) {
      from components.java
    }
  }
}
